name: Terraform Apply

# Controle de concorrÃªncia para evitar execuÃ§Ãµes simultÃ¢neas
concurrency:
  group: terraform-apply-${{ github.event.inputs.environment || 'all' }}
  cancel-in-progress: false

on:
  push:
    branches: [main]
    paths: ['terraform/**']
  repository_dispatch:
    types: [app-deployed-staging, app-deployed-production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  detect-changes:
    name: Detect Environment Changes
    runs-on: ubuntu-latest
    outputs:
      staging: ${{ steps.changes.outputs.staging }}
      production: ${{ steps.changes.outputs.production }}
      environment: ${{ steps.determine-env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Determine target environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            if [ "${{ github.event.action }}" = "app-deployed-staging" ]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.action }}" = "app-deployed-production" ]; then
              echo "environment=production" >> $GITHUB_OUTPUT
            fi
          else
            # Push to main - detect changes
            echo "environment=auto-detect" >> $GITHUB_OUTPUT
          fi
          
      - uses: dorny/paths-filter@v2
        id: changes
        if: steps.determine-env.outputs.environment == 'auto-detect'
        with:
          filters: |
            staging:
              - 'terraform/environments/staging/**'
              - 'terraform/modules/**'
            production:
              - 'terraform/environments/production/**'
              - 'terraform/modules/**'

  apply-staging:
    name: Apply Staging
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      (needs.detect-changes.outputs.environment == 'staging') ||
      (needs.detect-changes.outputs.environment == 'auto-detect' && needs.detect-changes.outputs.staging == 'true') ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'app-deployed-staging')
    environment: 
      name: staging-infrastructure
      url: https://staging.chat2.superagentes.ai
    
    defaults:
      run:
        working-directory: terraform/environments/staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=staging.tfstate"

      - name: Terraform Plan
        run: |
          terraform plan -input=false \
            -var="environment=staging" \
            -var="resource_group_name=rg-sachat-staging" \
            -var="domain_name=staging.chat2.superagentes.ai" \
            -out=staging.tfplan

      - name: Terraform Apply
        if: github.event.inputs.action != 'plan'
        run: terraform apply -input=false staging.tfplan

      - name: Get Outputs
        id: outputs
        if: github.event.inputs.action != 'plan'
        run: |
          APP_URL=$(terraform output -raw app_url 2>/dev/null || echo "")
          MONGODB_ENDPOINT=$(terraform output -raw mongodb_endpoint 2>/dev/null || echo "")
          STORAGE_ACCOUNT=$(terraform output -raw storage_account_name 2>/dev/null || echo "")
          
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          echo "mongodb_endpoint=$MONGODB_ENDPOINT" >> $GITHUB_OUTPUT
          echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT

      - name: Update Environment Info
        if: github.event.inputs.action != 'plan'
        run: |
          echo "ðŸŽ¯ **Staging Environment Updated**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL**: ${{ steps.outputs.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **MongoDB**: ${{ steps.outputs.outputs.mongodb_endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage**: ${{ steps.outputs.outputs.storage_account }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Updated**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  apply-production:
    name: Apply Production
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      (needs.detect-changes.outputs.environment == 'production') ||
      (needs.detect-changes.outputs.environment == 'auto-detect' && needs.detect-changes.outputs.production == 'true') ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'app-deployed-production')
    environment: 
      name: production-infrastructure
      url: https://chat2.superagentes.ai
    
    defaults:
      run:
        working-directory: terraform/environments/production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=production.tfstate"

      - name: Terraform Plan
        run: |
          terraform plan -input=false \
            -var="environment=production" \
            -var="resource_group_name=rg-sachat-prod" \
            -var="domain_name=chat2.superagentes.ai" \
            -out=production.tfplan

      - name: Terraform Apply
        if: github.event.inputs.action != 'plan'
        run: terraform apply -input=false production.tfplan

      - name: Get Outputs
        id: outputs
        if: github.event.inputs.action != 'plan'
        run: |
          APP_URL=$(terraform output -raw app_url 2>/dev/null || echo "")
          MONGODB_ENDPOINT=$(terraform output -raw mongodb_endpoint 2>/dev/null || echo "")
          STORAGE_ACCOUNT=$(terraform output -raw storage_account_name 2>/dev/null || echo "")
          
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          echo "mongodb_endpoint=$MONGODB_ENDPOINT" >> $GITHUB_OUTPUT
          echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT

      - name: Update Environment Info
        if: github.event.inputs.action != 'plan'
        run: |
          echo "ðŸš€ **Production Environment Updated**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL**: ${{ steps.outputs.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **MongoDB**: ${{ steps.outputs.outputs.mongodb_endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage**: ${{ steps.outputs.outputs.storage_account }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Updated**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: Destroy Environment
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
    
    defaults:
      run:
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ github.event.inputs.environment }}.tfstate"

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -input=false \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="resource_group_name=rg-sachat-${{ github.event.inputs.environment }}" \
            -var="domain_name=${{ github.event.inputs.environment == 'production' && 'chat2.superagentes.ai' || 'staging.chat2.superagentes.ai' }}"

  notify-app-repo:
    name: Notify Application Repository
    runs-on: ubuntu-latest
    needs: [apply-staging, apply-production]
    if: always() && (needs.apply-staging.result == 'success' || needs.apply-production.result == 'success')
    
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ needs.apply-staging.result }}" = "success" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ needs.apply-production.result }}" = "success" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Repository Dispatch to App
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.APP_REPO_TOKEN }}
          repository: ${{ github.repository_owner }}/legendschat
          event-type: infrastructure-updated
          client-payload: |
            {
              "infra_repo": "${{ github.repository }}",
              "infra_commit": "${{ github.sha }}",
              "environment": "${{ steps.env.outputs.environment }}",
              "updated_by": "${{ github.actor }}"
            }